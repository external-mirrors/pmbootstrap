# Copyright 2023 Oliver Smith
# SPDX-License-Identifier: GPL-3.0-or-later
import logging
import hashlib
import os
import fileinput

import pmb.chroot
import pmb.build
import pmb.helpers.run
import pmb.helpers.pmaports

def fix_local(args, pkgname, path=None):
    """
    Fix the checksums of all local sources. Returns True if something was
    changed, False otherwise.

    :param pkgname: name of the package
    :param path: path to the APKBUILD file
    """

    if not path:
        path = os.path.join(pmb.helpers.pmaports.find(args, pkgname, True), "APKBUILD")
    apkbuild = pmb.parse.apkbuild(path)
    checksums = apkbuild["sha512sums"]
    # If a new file is added to source but not in checksums, it will be in files
    # but not in checksums. So we need to check both.
    files = apkbuild["source"]
    pmaportdir = pmb.helpers.pmaports.find(args, pkgname)
    if not pmaportdir:
        raise RuntimeError("Package '" + pkgname + "': Could not find package!")

    changed = False
    # Use the union of files from the existing checksums and from the sources
    # This offers the best chance of catching files that might be picked up
    # through shell variables in sources, and files that might have been added
    # the sources but aren't in the checksums yet
    for file in set(list(checksums.keys()) + files):
        srcpath = os.path.join(pmaportdir, file)
        if not os.path.exists(srcpath):
            continue
        # Maybe some way to optimise this by buffering the file?
        # we aren't dealing with huge files here though
        checksum = hashlib.sha512(open(srcpath, "rb").read()).hexdigest()
        if file not in checksums or checksum != checksums[file]:
            logging.info("Fixing checksum for " + srcpath)
            checksums[file] = checksum
            changed = True

    if not changed:
        return False

    # Iterate over the APKBUILD and update the checksums array
    # thankfully it uses a consistent format as it's always generated by
    # abuild.
    with fileinput.input(path, inplace=True) as file:
        stage = 0
        for line in file:
            # Found the checksums variable, move to stage 1
            if stage == 0 and line.startswith("sha512sums=\""):
                stage = 1
            # Until we find the closing quote, skip lines from the old file
            # (we already printed all the checksums out)
            elif stage == 2:
                if line.startswith("\""):
                    stage = 3 # end
                else:
                    continue
            # Print out all the new checksums, we do this in one go as the number
            # of files may have changed
            elif stage == 1:
                for file in checksums.keys():
                    print(f"{checksums[file]}  {file}")
                stage = 2
                continue

            # The default behaviour is to leave the line unchanged
            print(line, end="")

    return True

def update(args, pkgname):
    """ Fetch all sources and update the checksums in the APKBUILD. """
    pmb.build.init_abuild_minimal(args)
    pmb.build.copy_to_buildpath(args, pkgname)
    logging.info("(native) generate checksums for " + pkgname)
    pmb.chroot.user(args, ["abuild", "checksum"],
                    working_dir="/home/pmos/build")

    # Copy modified APKBUILD back
    source = args.work + "/chroot_native/home/pmos/build/APKBUILD"
    target = pmb.helpers.pmaports.find(args, pkgname) + "/"
    pmb.helpers.run.user(args, ["cp", source, target])


def verify(args, pkgname):
    """ Fetch all sources and verify their checksums. """
    pmb.build.init_abuild_minimal(args)
    pmb.build.copy_to_buildpath(args, pkgname)
    logging.info("(native) verify checksums for " + pkgname)

    # Fetch and verify sources, "fetch" alone does not verify them:
    # https://github.com/alpinelinux/abuild/pull/86
    pmb.chroot.user(args, ["abuild", "fetch", "verify"],
                    working_dir="/home/pmos/build")
